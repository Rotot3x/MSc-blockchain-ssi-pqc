version: '3'
services:
  #
  # Client
  #
  client:
    image: von-network-base
    command: ./scripts/start_client.sh
    environment:
      - IP=${IP}
      - IPS=${IPS}
      - DOCKERHOST=${DOCKERHOST}
      - RUST_LOG=${RUST_LOG}
    networks:
      - von
    volumes:
      - client-data:/home/indy/.indy_client
      - ./tmp:/tmp

  #
  # Webserver
  #
  webserver:
    image: von-network-base
    command: bash -c 'sleep 10 && ./scripts/start_webserver.sh'
    container_name: von-webserver
    environment:
      - IP=${IP}
      - IPS=${IPS}
      - DOCKERHOST=${DOCKERHOST}
      - LOG_LEVEL=${LOG_LEVEL}
      - RUST_LOG=${RUST_LOG}
      - GENESIS_URL=${GENESIS_URL}
      - LEDGER_SEED=${LEDGER_SEED}
      - LEDGER_CACHE_PATH=${LEDGER_CACHE_PATH}
      - MAX_FETCH=${MAX_FETCH:-50000}
      - RESYNC_TIME=${RESYNC_TIME:-120}
      - POOL_CONNECTION_ATTEMPTS=${POOL_CONNECTION_ATTEMPTS:-5}
      - POOL_CONNECTION_DELAY=${POOL_CONNECTION_DELAY:-10}
      - REGISTER_NEW_DIDS=${REGISTER_NEW_DIDS:-True}
      - ENABLE_LEDGER_CACHE=${ENABLE_LEDGER_CACHE:-True}
      - ENABLE_BROWSER_ROUTES=${ENABLE_BROWSER_ROUTES:-True}
      - DISPLAY_LEDGER_STATE=${DISPLAY_LEDGER_STATE:-True}
      - LEDGER_INSTANCE_NAME=${LEDGER_INSTANCE_NAME:-localhost}
      - LEDGER_DESCRIPTION=${LEDGER_DESCRIPTION}
      - WEB_ANALYTICS_SCRIPT=${WEB_ANALYTICS_SCRIPT}
      - INFO_SITE_TEXT=${INFO_SITE_TEXT}
      - INFO_SITE_URL=${INFO_SITE_URL}
      - INDY_SCAN_URL=${INDY_SCAN_URL}
      - INDY_SCAN_TEXT=${INDY_SCAN_TEXT}
    networks:
      - von
    # ports:
    #   - ${WEB_SERVER_HOST_PORT:-9000}:8000
    volumes:
      - ./config:/home/indy/config
      - ./server:/home/indy/server
      - webserver-cli:/home/indy/.indy-cli
      - webserver-ledger:/home/indy/ledger

  #
  # Synchronization test
  #
  synctest:
    image: von-network-base
    command: ./scripts/start_synctest.sh
    environment:
      - IP=${IP}
      - IPS=${IPS}
      - DOCKERHOST=${DOCKERHOST}
      - LOG_LEVEL=${LOG_LEVEL}
      - RUST_LOG=${RUST_LOG}
    networks:
      - von
    ports:
      - ${WEB_SERVER_HOST_PORT:-9000}:8000
    volumes:
      - ./config:/home/indy/config
      - ./server:/home/indy/server
      - webserver-cli:/home/indy/.indy-cli
      - webserver-ledger:/home/indy/ledger

  #
  # Nodes
  #
  nodes:
    image: von-network-base
    command: ./scripts/start_nodes.sh
    networks:
      - von
    ports:
      - 9701:9701
      - 9702:9702
      - 9703:9703
      - 9704:9704
      - 9705:9705
      - 9706:9706
      - 9707:9707
      - 9708:9708
    environment:
      - IP=${IP}
      - IPS=${IPS}
      - DOCKERHOST=${DOCKERHOST}
      - LOG_LEVEL=${LOG_LEVEL}
      - RUST_LOG=${RUST_LOG}
    volumes:
      - nodes-data:/home/indy/ledger

  node1:
    image: von-network-base
    command: ./scripts/start_node.sh 1
    networks:
      - von
    ports:
      - 9701:9701
      - 9702:9702
    container_name: von-node1
    environment:
      - IP=${IP}
      - IPS=${IPS}
      - DOCKERHOST=${DOCKERHOST}
      - LOG_LEVEL=${LOG_LEVEL}
      - RUST_LOG=${RUST_LOG}
    volumes:
      - node1-data:/home/indy/ledger

  node2:
    image: von-network-base
    command: ./scripts/start_node.sh 2
    networks:
      - von
    ports:
      - 9703:9703
      - 9704:9704
    container_name: von-node2
    environment:
      - IP=${IP}
      - IPS=${IPS}
      - DOCKERHOST=${DOCKERHOST}
      - LOG_LEVEL=${LOG_LEVEL}
      - RUST_LOG=${RUST_LOG}
    volumes:
      - node2-data:/home/indy/ledger

  node3:
    image: von-network-base
    command: ./scripts/start_node.sh 3
    networks:
      - von
    ports:
      - 9705:9705
      - 9706:9706
    container_name: von-node3
    environment:
      - IP=${IP}
      - IPS=${IPS}
      - DOCKERHOST=${DOCKERHOST}
      - LOG_LEVEL=${LOG_LEVEL}
      - RUST_LOG=${RUST_LOG}
    volumes:
      - node3-data:/home/indy/ledger

  node4:
    image: von-network-base
    command: ./scripts/start_node.sh 4
    networks:
      - von
    ports:
      - 9707:9707
      - 9708:9708
    container_name: von-node4
    environment:
      - IP=${IP}
      - IPS=${IPS}
      - DOCKERHOST=${DOCKERHOST}
      - LOG_LEVEL=${LOG_LEVEL}
      - RUST_LOG=${RUST_LOG}
    volumes:
      - node4-data:/home/indy/ledger

  # Post-Quantum Nginx Reverse Proxy f√ºr VON Network Webserver
  pqc-reverseproxy-webserver:
    build:
      context: ./pqc_reverseproxy_nginx
      dockerfile: Dockerfile
      args:
        OPENSSL_TAG: openssl-3.5.4
        LIBOQS_TAG: 0.13.0
        OQSPROVIDER_TAG: 0.9.0
        NGINX_VERSION: 1.28.0
        SIG_ALG: mldsa65
        DEFAULT_GROUPS: X25519MLKEM768:mlkem768:x25519:mlkem1024
    container_name: von-pqc-reverseproxy-webserver
    environment:
      # OpenSSL Configuration
      - OPENSSL_CONF=/opt/openssl/.openssl/ssl/openssl.cnf
      # Post-Quantum Key Exchange Groups
      - DEFAULT_GROUPS=X25519MLKEM768:mlkem768:x25519:mlkem1024
    networks:
      - von
      - reverseproxy
    ports:
      - 8000:8000  # HTTPS with Post-Quantum Cryptography (ML-KEM-768)
    volumes:
      # Custom nginx configuration for reverse proxy
      - ./pqc_reverseproxy_nginx/nginx-conf/nginx_webserver.conf:/opt/nginx/nginx-conf/nginx.conf:ro
      # Custom ML-DSA-65 certificates
      - ./pqc_reverseproxy_nginx/certs:/opt/nginx/certs:ro
      # Logs
      - nginx-logs:/opt/nginx/logs
    depends_on:
      - webserver
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

networks:
  von:
  reverseproxy:

volumes:
  client-data:
  webserver-cli:
  webserver-ledger:
  node1-data:
  node2-data:
  node3-data:
  node4-data:
  nodes-data:
  nginx-logs: